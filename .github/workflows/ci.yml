name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
                ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt


      - name: Check PostgreSQL connection
        run: | 
          pg_isready -h localhost -p 5432 -U postgres

      - name: Fill up .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=${{vars.POSTGRES_PORT}}" >> .env
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DEBUG=${{ vars.DEBUG }}" >> .env
          echo "REDIS_HOST=memory://" >> .env
          echo "CELERY_BROKER_URL=memory://" >> .env
          echo "CELERY_RESULT_BACKEND=django-db" >> .env
          cat .env


      - name: Run migrate
        run: python manage.py migrate

      - name: Run tests
        run: |
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/courses:${{ github.sha }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/courses:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Install Docker on the server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo ufw --force enable
          sudo ufw allow 22/tcp
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw allow 5432/tcp
          sudo ufw allow 6379/tcp
          sudo ufw allow 8000/tcp
          sudo ufw allow 587/tcp
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo apt-get update
          sudo apt-get install -y git
          sudo git --version
          git clone --branch homework_35_2 https://github.com/Lampa97/Online_courses.git
          cd Online_courses
          git fetch --all
          git reset --hard origin/homework_35_2
          if [ -d "static" ]; then
          echo "Static folder exists."
          else
          echo "Static folder does not exist. Creating it now."
          mkdir static
          fi
          
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{vars.POSTGRES_PORT}}" >> .env
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DEBUG=${{ vars.DEBUG }}" >> .env
          echo "REDIS_HOST=${{vars.REDIS_HOST}}" >> .env
          echo "CELERY_BROKER_URL=${{vars.CELERY_BROKER_URL}}" >> .env
          echo "CELERY_RESULT_BACKEND=${{vars.CELERY_RESULT_BACKEND}}" >> .env
          echo "EMAIL_HOST=${{vars.EMAIL_HOST}}" >> .env
          echo "EMAIL_PORT=${{vars.EMAIL_PORT}}" >> .env
          echo "EMAIL_USE_TLS=${{vars.EMAIL_USE_TLS}}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{secrets.EMAIL_HOST_PASSWORD}}" >> .env
          echo "EMAIL_HOST_USER=${{secrets.EMAIL_HOST_USER}}" >> .env
          echo "STRIPE_API_KEY=${{secrets.STRIPE_API_KEY}}" >> .env
          sudo apt install -y python3.12-venv
          python3 -m venv venv
          source venv/bin/activate
          python3 manage.py migrate
          python3 manage.py createadmin
          
          echo "Running commands on the remote server"
          docker --version
          docker compose version
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo sysctl vm.overcommit_memory=1
          sudo docker compose down || true
          sudo docker system prune -f
          sudo docker compose up -d --build
          EOF
          

